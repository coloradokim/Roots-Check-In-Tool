{"version":3,"sources":["webpack:///./public/js/grove-overview.js","webpack:///./~/cookie/index.js"],"names":[],"mappings":";;;;;;;;0CAAA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,uCAAsC;AACtC,kBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS,2BAA2B;AACpC;AACA;AACA;AACA;AACA,GAAE;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS,2BAA2B;AACpC;AACA;AACA;AACA;AACA,GAAE;;;AAGF;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH,GAAE;AACF,EAAC;;;;;;;;;;;;ACpLD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,aAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,iBAAiB;AAC7C,kBAAiB;AACjB;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,aAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAsB;AACtB;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA","file":"GroveOverview.js","sourcesContent":["require('jquery');\nrequire('jquery-ui');\nvar cookie = require('cookie');\n\n\n// we may not need these parsing functions anymore:\n\n// function from scotch tutorial to parse cookie https://scotch.io/quick-tips/easily-create-read-and-erase-cookies-with-jquery\n// function readCookie(name) {\n//   var nameEQ = name + \"=\";\n//   var ca = document.cookie.split(';');\n//   for(var i=0;i < ca.length;i++) {\n//     var c = ca[i];\n//     while (c.charAt(0)==' ')\n//     c = c.substring(1,c.length);\n//     if (c.indexOf(nameEQ) == 0)\n//     return c.substring(nameEQ.length,c.length);\n//     }\n//   return null;\n// }\n//\n// function urlNameParse (str) {\n//   var newArr = str.split('')\n//   var mapArr = newArr.map(function(item) {\n//     if (item === \"%\" ) {\n//       return \"\"\n//     } else if (item === \"2\") {\n//       return \"\"\n//     } else if (item === \"0\")\n//       return \" \"\n//     else {\n//       return item\n//     }\n//   })\n//   return mapArr.join(\"\")\n// }\n\nfunction getCurrentTeacher() {\n  var cookieObject = cookie.parse(document.cookie);\n  console.log(cookieObject.name);\n  console.log(cookieObject.image);\n  console.log(cookieObject.googleId);\n};\n\nfunction getStudents(){\n\tvar url = \"/api/user\";\n\tvar students;\n\t$.ajax({\n\t\turl: url,\n\t\tdataType: \"json\",\n\t\tsuccess: function(users){\n\t\t\tstudents = users;\n\t\t\tupdateStudentNumbers(students)\n\t\t}\n\t})\n};\n\nfunction updateStudentNumbers(students){\n\tconsole.log(students);\n\tvar zoneNow = {\n\t\t\"Flex Center\": 0,\n\t\t\"Maker Center\": 0,\n\t\t\"iPad Center\": 0,\n\t\t\"Library Center\": 0,\n\t\t\"Writing Center\": 0\n\t};\n\tvar zoneNext = {\n\t\t\"Flex Center\": 0,\n\t\t\"Maker Center\": 0,\n\t\t\"iPad Center\": 0,\n\t\t\"Library Center\": 0,\n\t\t\"Writing Center\": 0\n\t};\n\n    students.forEach(function(doc) {\n    \tif (doc.groveCalendar.length > 0) {\n    \t\tzoneNow[doc.groveCalendar[0].location] += 1\n    \t}\n    \tif (doc.groveCalendar.length > 1) {\n      \t\tzoneNext[doc.groveCalendar[1].location] += 1\n    \t}\n    \t//grab element in DOM with jquery and assign\n    \tconsole.log('now: ', zoneNow, 'next: ', zoneNext);\n    });\n}\n\nfunction getZones(){\n\tvar url = \"/api/zones\";\n\tvar zones;\n\t$.ajax({\n\t\turl: url,\n\t\tdataType: \"json\",\n\t\tsuccess: function(zones){\n\t\t\tzones = zones;\n\t\t\tupdateZoneAssignments(zones)\n\t\t}\n\t})\n}\n\nfunction updateZoneAssignments(zones){\n\tconsole.log(zones)\n}\n\nfunction toggleWatching(zone){\n\t//check watching class to see if zone is active\n\tif($(zone).hasClass( \"currently-watching\" )){\n\t\t$(zone).removeClass( \"currently-watching\");\n\t\ttapout(zone);\n\t}\n\telse {\n\t\t$(zone).addClass(\"currently-watching\");\n\t\ttapin(zone);\n\t}\n}\n\nfunction tapin(zone){\n\tconsole.log(\"you are the zone: \"+ zone.id);\n\tgoogleId = getCurrentTeacher();\n\tconsole.log(googleId);\n\tdata = {\n\t\tteacher_id: googleId,\n\t\tzone: zone.id\n\t};\n\turl = \"/api/zone\";\n\t$.ajax({\n\t\turl: url,\n\t\ttype: \"POST\",\n\t\tdata: {data: JSON.stringify(data)},\n\t\tdataType: \"json\",\n\t\tsuccess: function(){\n\t\t\trefreshMap();\n\t\t}\n\t});\n\n}\n\nfunction tapout(zone){\n\tconsole.log(\"Removed from zone: \"+ zone.id);\n\tdata = {\n\t\tteacher_id: getCurrentTeacher(),\n\t\tzone: zone.id\n\t};\n\n\turl = \"/api/zone/remove\";\n\t$.ajax({\n\t\turl: url,\n\t\ttype: \"POST\",\n\t\tdata: {data: JSON.stringify(data)},\n\t\tdataType: \"json\",\n\t\tsuccess: function(){\n\t\t\trefreshMap();\n\t\t}\n\t});\n\n\n}\n\nfunction refreshMap(){\n\tconsole.log(\"refreshing the map\");\n\t// Add currently-watching class to any class they are currently watching\n\n\t// Add Avitar to currently watching\n\n\t// Add other teachers Avitars to the other teachers area\n\n\t// update counts of students\n\n}\n\n// getStudents();\ngetZones();\n\n$(document).ready( function(){\n\trefreshMap();\n\n\t$(\".container a\").each(function(index, el){\n\t\t$(el).on(\"click\", function(){\n\t\t\ttoggleWatching(el);\n\t\t});\n\t})\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/grove-overview.js\n ** module id = 0\n ** module chunks = 1\n **/","/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.parse = parse;\r\nexports.serialize = serialize;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar decode = decodeURIComponent;\r\nvar encode = encodeURIComponent;\r\nvar pairSplitRegExp = /; */;\r\n\r\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\n\r\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\n\r\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse(str, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('argument str must be a string');\r\n  }\r\n\r\n  var obj = {}\r\n  var opt = options || {};\r\n  var pairs = str.split(pairSplitRegExp);\r\n  var dec = opt.decode || decode;\r\n\r\n  pairs.forEach(function(pair) {\r\n    var eq_idx = pair.indexOf('=')\r\n\r\n    // skip things that don't look like key=value\r\n    if (eq_idx < 0) {\r\n      return;\r\n    }\r\n\r\n    var key = pair.substr(0, eq_idx).trim()\r\n    var val = pair.substr(++eq_idx, pair.length).trim();\r\n\r\n    // quoted values\r\n    if ('\"' == val[0]) {\r\n      val = val.slice(1, -1);\r\n    }\r\n\r\n    // only assign once\r\n    if (undefined == obj[key]) {\r\n      obj[key] = tryDecode(val, dec);\r\n    }\r\n  });\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction serialize(name, val, options) {\r\n  var opt = options || {};\r\n  var enc = opt.encode || encode;\r\n\r\n  if (!fieldContentRegExp.test(name)) {\r\n    throw new TypeError('argument name is invalid');\r\n  }\r\n\r\n  var value = enc(val);\r\n\r\n  if (value && !fieldContentRegExp.test(value)) {\r\n    throw new TypeError('argument val is invalid');\r\n  }\r\n\r\n  var pairs = [name + '=' + value];\r\n\r\n  if (null != opt.maxAge) {\r\n    var maxAge = opt.maxAge - 0;\r\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\r\n    pairs.push('Max-Age=' + Math.floor(maxAge));\r\n  }\r\n\r\n  if (opt.domain) {\r\n    if (!fieldContentRegExp.test(opt.domain)) {\r\n      throw new TypeError('option domain is invalid');\r\n    }\r\n\r\n    pairs.push('Domain=' + opt.domain);\r\n  }\r\n\r\n  if (opt.path) {\r\n    if (!fieldContentRegExp.test(opt.path)) {\r\n      throw new TypeError('option path is invalid');\r\n    }\r\n\r\n    pairs.push('Path=' + opt.path);\r\n  }\r\n\r\n  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());\r\n  if (opt.httpOnly) pairs.push('HttpOnly');\r\n  if (opt.secure) pairs.push('Secure');\r\n  if (opt.firstPartyOnly) pairs.push('First-Party-Only');\r\n\r\n  return pairs.join('; ');\r\n}\r\n\r\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\r\n\r\nfunction tryDecode(str, decode) {\r\n  try {\r\n    return decode(str);\r\n  } catch (e) {\r\n    return str;\r\n  }\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/cookie/index.js\n ** module id = 106\n ** module chunks = 1\n **/"],"sourceRoot":""}