{"version":3,"sources":["webpack:///./public/js/grove-calendar.js"],"names":[],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA,wCAAuC,eAAe;AACtD;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAE;AACF;;AAEA;AACA;;AAEA;;AAEA;AACA,uDAAsD,0BAA0B;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,GAAE;;AAEF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,0BAAyB,mBAAmB;AAC5C;AACA;AACA;;AAEA,KAAI;AACJ;AACA;AACA;AACA,IAAG;AACH,GAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ,IAAG;AACH,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,GAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,GAAE;;AAEF;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,oCAAmC,4BAA4B;AAC/D;AACA,IAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;AACA;AACA,IAAG;AACH,GAAE;AACF,EAAC","file":"GroveCalendar.js","sourcesContent":["// Requires\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar $ = require('jquery');\nrequire('select2');\nrequire('bootstrap');\nrequire('jquery-ui');\n\n// Global variable students: array of all the student objects\nvar students = [];\n\n// Load the FOCUS_AREA options for initializing the select2, allowing teachers to input new focus areas if desired\nvar FOCUS_AREA_OPTIONS = _.chain(FOCUS_AREAS).keys().sortBy().value().map( function(fa) {\n\treturn {\n\t\tid: fa,\n\t\ttext: fa\n\t};\n});\n\n// Helper function for adding to FOCUS_AREA_OPTIONS\nfunction addToFocus(focus_area) {\n\t// Check if the focus_area already exists in the list, otherwise add it\n\tif (!_.findWhere(FOCUS_AREA_OPTIONS, {id: focus_area})) {\n\t\tFOCUS_AREA_OPTIONS = FOCUS_AREA_OPTIONS.concat({\n\t\t\tid: focus_area,\n\t\t\ttext: focus_area\n\t\t});\n\n\t\t$('select[name=\"focus_area\"]').select2({\n\t\t\tdata: FOCUS_AREA_OPTIONS,\n\t\t\ttags: true,\n\t\t\tallowClear: true,\n\t\t\twidth: 'style'\n\t\t});\n\t}\n}\n\n// Function for resetting the event form\nfunction resetForm(hideForm, retainSubmit){\n\t$('#add-event-text').text('   Add Event');\n\n\t// Manually reset values because select2 doesn't work with form.reset()\n\t$('#activity-form select[name=\"activity\"]').val(null);\n\t$('#activity-form select[name=\"focus_area\"]').select2('val', null);\n\n\tif (!retainSubmit) {\n\t\t$('#add-event').off('click');\n\t}\n\tif (hideForm) {\n\t\t$('#activity-form').hide('fast');\n\t\t$('#calendar-button-container').show('fast');\n\t}\n}\n\n// Constructor for student objects\nvar StudentGroveDisplay = function(student){\n\tthis.googleId = student.googleId;\n\tthis.name = student.name;\n\tthis.image = student.image;\n\tthis.calendar = student.groveCalendar || [];\n\tthis.option = $('<option>'+student.name+'</option>').attr('value', student.googleId);\n\tthis.optionRendered = false;\n\n\tthis.eventDisplays = _.map(student.groveCalendar, function(event, index) {\n\t\treturn new EventDisplay(this, event, index);\n\t}.bind(this)) || [];\n};\n\n// Check if the student is displayed in the list and, if not, render\nStudentGroveDisplay.prototype.renderOption = function(selectId){\n\tif (!this.optionRendered) {\n\t\t$(selectId).append(this.option);\n\t\tthis.optionRendered = true;\n\t}\n};\n\n// Throw each of the event display rows into the table\nStudentGroveDisplay.prototype.renderEvents = function(containerTable) {\n\t_.each(this.eventDisplays, function(d) {\n\t\td.render(containerTable);\n\n\t\t// Add any custom focus areas to the FOCUS_AREA_OPTIONS\n\t\taddToFocus(d.event.focus_area);\n\t});\n};\n\n// When the list is re-sorted through drag and drop, update all the indices\nStudentGroveDisplay.prototype.updateSort = function(e, ui) {\n\n\tvar self = this;\n\n\t// First, grab the updated list of indices, stored in the data-index attribute, and create a copy of the student's array of events\n\tvar indices = $('#events-list').sortable(\"toArray\", { attribute: 'data-index' });\n\n\t// Now iterate through each index, and update the orders\n\tindices.forEach(function(data_index, order) {\n\t\tif (data_index != order) {\n\t\t\tself.eventDisplays[data_index].index = order;\n\t\t\t$(self.eventDisplays[data_index].el).attr('data-index', order)\n\t\t}\n\t});\n\n\tthis.eventDisplays = _.sortBy(this.eventDisplays, 'index');\n\n\t// Enable the save button now that changes have been made, change the text to \"Save Calendar\" if not already done\n\t$('#save-calendar').removeClass('disabled').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle');\n}\n\n// Render the events into the calendar table\nStudentGroveDisplay.prototype.renderCalendar = function(containerId) {\n\t// Change the title\n\t$('#student-name').text(this.name);\n\t$('#title-text').text(\"\\'s Grove Cycle\")\n\t$('#student-icon').empty().append('<img class=\"student-icon\" src=\"'+this.image+'\">')\n\n\t// Hide the edit / add event form, if it is open, and reset it.\n\tresetForm(true, false);\n\n\t// Empty out the list if any events are in there, render the new events, then show calendar and make table sortable\n\t$(containerId).empty();\n\tthis.renderEvents(containerId);\n\n\tvar self = this;\n\n\t$('#calendar-container').show();\n\t$('#events-list').sortable({\n\t\tstop: self.updateSort.bind(self)\n\t});\n\n\t// Make the new event button show the form and attach the proper event handler to it\n\t$('#create-new-event').off('click').on('click', function(event){\n\t\t// Update the form legend and show it\n\t\t$('#activity-legend').text('New event for: ' + self.name);\n\t\t$('#activity-form').show('fast');\n\n\t\t// Event handler for submitting\n\t\t$('#add-event').on('click', function(e){\n\t\t\te.preventDefault();\n\n\t\t\t// On submit, grab all the data, create a new EventDisplay object, push it into the student's event displays, and append it to the DOM\n\t\t\tvar newEvent = {};\n\t\t\tvar activity = $('#activity-form select[name=\"activity\"]').val();\n\t\t\tnewEvent.location = activity.split('#')[0];\n\t\t\tnewEvent.activity = activity.split('#')[1];\n\n\t\t\tvar index = self.eventDisplays.length;\n\t\t\t\n\t\t\tvar focus_area = $('#activity-form select[name=\"focus_area\"]').val();\n\t\t\tnewEvent.focus_area = focus_area\n\t\t\taddToFocus(focus_area);\n\t\t\t\n\t\t\tnewEvent = new EventDisplay(self, newEvent, index);\n\n\t\t\tself.eventDisplays.push(newEvent);\n\n\t\t\tnewEvent.render('#events-list');\n\t\t\t\n\t\t\t// Reset the form\n\t\t\tresetForm(false, true);\n\n\t\t\t// Enable the save button now that changes have been made, change the text to \"Save Calendar\" if not already done\n\t\t\t$('#save-calendar').removeClass('disabled').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle');\n\t\t});\n\n\t\t// Event handler for canceling\n\t\t$('#cancel-event-add').on('click', function(e){\n\t\t\te.preventDefault();\n\t\t\t// Reset the form and hide it\n\t\t\tresetForm(true)\n\t\t});\n\t});\n\t\n\t// Update the save calendar button to have disabled class and text of \"Save Calendar\"\n\t$('#save-calendar').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle').addClass('disabled');\n\n\t// Update the event handler on the save calendar button to refer to this student\n\t$('#save-calendar').off('click').on('click', function(event) {\n\t\t$('#save-calendar').empty().text('Saving...').addClass('disabled');\n\n\t\tvar calendar = self.eventDisplays.map(function(e) {\n\t\t\te.event.checkedIn = false;\n\t\t\treturn e.event;\n\t\t});\n\n\t\t$.ajax('/api/grove/'+self.googleId, {\n\t\t\tmethod: 'PUT',\n\t\t\tdata: JSON.stringify({calendar: calendar}),\n\t\t\tcontentType: 'application/json',\n\t\t\tsuccess: function() {\n\t\t\t\t$('#save-calendar').empty().append('<i class=\"fa fa-calendar\"></i>   Cycle Saved!');\n\t\t\t\t\n\t\t\t},\n\t\t\terror: function(xhr, text, error) {\n\t\t\t\t$('#save-calendar').empty().removeClass('btn-success').addClass('btn-danger').text('Error Saving').removeClass('disabled');\n\t\t\t}\n\t\t});\n\t});\n};\n\n// Event Display constructor\nvar EventDisplay = function(student, event, index) {\n\tthis.student = student;\n\tthis.event = event;\n\tthis.index = index;\n\t// Call create display to make the DOM element\n\tthis.el = this.createDisplay();\n};\n\n// Creates the display element\nEventDisplay.prototype.createDisplay = function() {\n\t// Row item for the event\n\tvar row = '<tr></tr>';\n\n\t// Center\n\tvar location = $('<td></td>').text(this.event.location);\n\n\t// Activity\n\tvar activity = $('<td></td>').text(this.event.activity);\n\n\t// Focus Area\n\tvar focus_area = $('<td></td>').text(this.event.focus_area);\n\n\t// Buttons for editing and removing, added to the EventDisplay object\n\tvar edit = '<td></td>';\n\tthis.editButton = $('<button class=\"btn btn-xs btn-info\"><i class=\"fa fa-pencil\"></i></button>');\n\tedit = $(edit).append(this.editButton);\n\tvar remove = '<td></td>';\n\tthis.removeButton = $('<button class=\"btn btn-xs btn-danger\"><i class=\"fa fa-times\"></i></button>');\n\tremove = $(remove).append(this.removeButton);\n\n\t// Append cells to the row\n\treturn $(row).attr('data-index', this.index).append(location, activity, focus_area, edit, remove)[0];\n};\n\n// Renders the display element\nEventDisplay.prototype.render = function(container, replace) {\n\t\n\t// Create a new variable pointing to this particular event display so we can reference it in the edit and remove events\n\tvar self = this;\n\n\t// If the render is after an edit and replace was passed in, replace the old element\n\tif (replace) {\n\t\tvar oldElement = self.el;\n\t\tself.el = self.createDisplay();\n\t\t$(oldElement).replaceWith(self.el);\n\t} else {\n\t\t$(container).append(this.el);\n\t}\n\n\t// Once the element is added to the DOM, attach the event handlers to its elements\n\t// Attach the event handler for the edit button\n\t$(this.editButton).click(function(e) {\n\t\t// Show the event form, fill in the defaults for this event, bind submission to changing this event\n\t\t$('#activity-form select[name=\"activity\"]').val(self.event.location+'#'+self.event.activity);\n\t\t$('#activity-form select[name=\"focus_area\"]').select2('val', self.event.focus_area);\n\t\t$('#add-event-text').text('   Save');\n\n\t\t$('#activity-form').show('fast', function(){\n\t\t\t$('#add-event').off('click').one('click', function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\t// Update values for this event\n\t\t\t\tvar activity = $('#activity-form select[name=\"activity\"]').val();\n\t\t\t\tif (activity) {\n\t\t\t\t\tself.event.location = activity.split('#')[0];\n\t\t\t\t\tself.event.activity = activity.split('#')[1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tself.event.location = '';\n\t\t\t\t\tself.event.activity = '';\n\t\t\t\t}\n\n\t\t\t\tvar focus_area = $('#activity-form select[name=\"focus_area\"]').val();\n\t\t\t\tself.event.focus_area = focus_area;\n\t\t\t\taddToFocus(focus_area);\n\t\t\t\t\n\t\t\t\t// Reset the form, unbind handlers, and hide it\n\t\t\t\tresetForm(true);\n\n\t\t\t\t// Render the element with replace set to true\n\t\t\t\tself.render('#events-list', true);\n\n\t\t\t\t// Enable the save calendar button now that changes have been made\n\t\t\t\t$('#save-calendar').removeClass('disabled');\n\t\t\t});\n\n\t\t\t// Event handler for canceling\n\t\t\t$('#cancel-event-add').on('click', function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\t// Reset the form and hide it\n\t\t\t\tresetForm(true);\n\t\t\t});\n\t\t});\n\t});\n\t// Attach the event handler for the remove button, binding to this create display\n\t$(this.removeButton).click(function(e) {\n\t\t// Remove the el from the DOM\n\t\t$(self.el).remove()\n\t\t// Remove this event display from the student calendar\n\t\tself.student.eventDisplays.splice(self.index, 1);\n\t\t// Change the index of the later events\n\t\tself.student.eventDisplays.forEach(function(eventDisplay){\n\t\t\tif (eventDisplay.index > self.index) eventDisplay.index--;\n\t\t});\n\t\t// Remove all event handlers from the activity form and hide it\n\t\tresetForm(true);\n\t});\n}\n\n$(function(){\n\t// Load up the grove calendar options from CONFIG.js\n\t// The keys of GROVE_ACTIVITIES are the different centers\n\t_.keys(GROVE_ACTIVITIES).forEach( function(center) {\n\t\tvar group = $('<optgroup>').attr('label', center);\n\n\t\t// For each center, take all the activities and add an option\n\t\tGROVE_ACTIVITIES[center].forEach( function(activity) {\n\t\t\tvar option = $('<option>').attr('value', [center, activity].join('#')).text(activity);\n\t\t\tgroup.append(option);\n\t\t});\n\t\t$('select[name=\"activity\"]').append(group);\n\t});\n\n\t$('select[name=\"focus_area\"]').css('width', '100%').select2({\n\t\tdata: FOCUS_AREA_OPTIONS,\n\t\ttags: true,\n\t\twidth: 'style'\n\t});\n\n\t// Get all students\n\t$.get('/api/grove', function(data){\n\n\t\t// Initially fill the student list\n\t\tstudents = _.map(_.sortBy(data, 'name'), function(s) {\n\t\t\tstudent = new StudentGroveDisplay(s);\n\t\t\tstudent.renderOption('#student-names-select');\n\t\t\treturn student;\n\t\t});\n\n\t\t// When a student is selected, trigger their render calendar\n\t\t$('#student-names-select').on('change', function(e) {\n\t\t\tvar student = _.find(students, { 'googleId': e.target.value});\n\t\t\tstudent.renderCalendar('#events-list');\n\t\t});\n\n\t\t// When the student name input is changed, go through the students and only display the ones whose name matches the fragment in the input\n\t\t$('#student-name-search').on('keyup', function(e){\n\n\t\t\t$('#student-names-select').css('visibility', '');\n\n\t\t\tvar frag = $(this).val().toLowerCase();\n\t\t\t_.each(students, function(s) {\n\t\t\t\tif (s.name.toLowerCase().match(frag)){\n\t\t\t\t\ts.renderOption('#student-names-select');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$(s.option).remove();\n\t\t\t\t\ts.optionRendered = false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If there is only one student in the list, trigger change\n\t\t\tif ($('#student-names-select option').length === 1) {\n\t\t\t\t$('#student-names-select').trigger('change');\n\t\t\t}\n\t\t});\n\t});\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/grove-calendar.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}