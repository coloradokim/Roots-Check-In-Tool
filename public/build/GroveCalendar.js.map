{"version":3,"sources":["webpack:///GroveCalendar.js","webpack:///./public/js/grove-calendar.js"],"names":["webpackJsonp","module","exports","__webpack_require__","addToFocus","focus_area","_","findWhere","FOCUS_AREA_OPTIONS","id","concat","text","$","select2","data","tags","allowClear","width","resetForm","hideForm","retainSubmit","val","off","hide","show","students","chain","FOCUS_AREAS","keys","sortBy","value","map","fa","StudentGroveDisplay","student","this","googleId","name","image","calendar","groveCalendar","option","attr","optionRendered","eventDisplays","event","index","EventDisplay","bind","prototype","renderOption","selectId","append","renderEvents","containerTable","each","d","render","updateSort","e","ui","self","indices","sortable","attribute","forEach","data_index","order","el","removeClass","empty","renderCalendar","containerId","stop","on","preventDefault","newEvent","activity","location","split","length","push","addClass","checkedIn","ajax","method","JSON","stringify","contentType","success","error","xhr","createDisplay","row","edit","editButton","remove","removeButton","container","replace","oldElement","replaceWith","click","one","splice","eventDisplay","GROVE_ACTIVITIES","center","group","join","css","get","s","find","target","frag","toLowerCase","match","trigger"],"mappings":"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","file":"GroveCalendar.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/*!*************************************!*\\\n  !*** ./public/js/grove-calendar.js ***!\n  \\*************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Requires\n\t\n\tvar _ = __webpack_require__(/*! lodash */ 1);\n\tvar moment = __webpack_require__(/*! moment */ 3);\n\tvar $ = __webpack_require__(/*! jquery */ 90);\n\t__webpack_require__(/*! select2 */ 91);\n\t__webpack_require__(/*! bootstrap */ 92);\n\t__webpack_require__(/*! jquery-ui */ 105);\n\t\n\t// Global variable students: array of all the student objects\n\tvar students = [];\n\t\n\t// Load the FOCUS_AREA options for initializing the select2, allowing teachers to input new focus areas if desired\n\tvar FOCUS_AREA_OPTIONS = _.chain(FOCUS_AREAS).keys().sortBy().value().map( function(fa) {\n\t\treturn {\n\t\t\tid: fa,\n\t\t\ttext: fa\n\t\t};\n\t});\n\t\n\t// Helper function for adding to FOCUS_AREA_OPTIONS\n\tfunction addToFocus(focus_area) {\n\t\t// Check if the focus_area already exists in the list, otherwise add it\n\t\tif (!_.findWhere(FOCUS_AREA_OPTIONS, {id: focus_area})) {\n\t\t\tFOCUS_AREA_OPTIONS = FOCUS_AREA_OPTIONS.concat({\n\t\t\t\tid: focus_area,\n\t\t\t\ttext: focus_area\n\t\t\t});\n\t\n\t\t\t$('select[name=\"focus_area\"]').select2({\n\t\t\t\tdata: FOCUS_AREA_OPTIONS,\n\t\t\t\ttags: true,\n\t\t\t\tallowClear: true,\n\t\t\t\twidth: 'style'\n\t\t\t});\n\t\t}\n\t}\n\t\n\t// Function for resetting the event form\n\tfunction resetForm(hideForm, retainSubmit){\n\t\t$('#add-event-text').text('   Add Event');\n\t\n\t\t// Manually reset values because select2 doesn't work with form.reset()\n\t\t$('#activity-form select[name=\"activity\"]').val(null);\n\t\t$('#activity-form select[name=\"focus_area\"]').select2('val', null);\n\t\n\t\tif (!retainSubmit) {\n\t\t\t$('#add-event').off('click');\n\t\t}\n\t\tif (hideForm) {\n\t\t\t$('#activity-form').hide('fast');\n\t\t\t$('#calendar-button-container').show('fast');\n\t\t}\n\t}\n\t\n\t// Constructor for student objects\n\tvar StudentGroveDisplay = function(student){\n\t\tthis.googleId = student.googleId;\n\t\tthis.name = student.name;\n\t\tthis.image = student.image;\n\t\tthis.calendar = student.groveCalendar || [];\n\t\tthis.option = $('<option>'+student.name+'</option>').attr('value', student.googleId);\n\t\tthis.optionRendered = false;\n\t\n\t\tthis.eventDisplays = _.map(student.groveCalendar, function(event, index) {\n\t\t\treturn new EventDisplay(this, event, index);\n\t\t}.bind(this)) || [];\n\t};\n\t\n\t// Check if the student is displayed in the list and, if not, render\n\tStudentGroveDisplay.prototype.renderOption = function(selectId){\n\t\tif (!this.optionRendered) {\n\t\t\t$(selectId).append(this.option);\n\t\t\tthis.optionRendered = true;\n\t\t}\n\t};\n\t\n\t// Throw each of the event display rows into the table\n\tStudentGroveDisplay.prototype.renderEvents = function(containerTable) {\n\t\t_.each(this.eventDisplays, function(d) {\n\t\t\td.render(containerTable);\n\t\n\t\t\t// Add any custom focus areas to the FOCUS_AREA_OPTIONS\n\t\t\taddToFocus(d.event.focus_area);\n\t\t});\n\t};\n\t\n\t// When the list is re-sorted through drag and drop, update all the indices\n\tStudentGroveDisplay.prototype.updateSort = function(e, ui) {\n\t\n\t\tvar self = this;\n\t\n\t\t// First, grab the updated list of indices, stored in the data-index attribute, and create a copy of the student's array of events\n\t\tvar indices = $('#events-list').sortable(\"toArray\", { attribute: 'data-index' });\n\t\n\t\t// Now iterate through each index, and update the orders\n\t\tindices.forEach(function(data_index, order) {\n\t\t\tif (data_index != order) {\n\t\t\t\tself.eventDisplays[data_index].index = order;\n\t\t\t\t$(self.eventDisplays[data_index].el).attr('data-index', order)\n\t\t\t}\n\t\t});\n\t\n\t\tthis.eventDisplays = _.sortBy(this.eventDisplays, 'index');\n\t\n\t\t// Enable the save button now that changes have been made, change the text to \"Save Calendar\" if not already done\n\t\t$('#save-calendar').removeClass('disabled').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle');\n\t}\n\t\n\t// Render the events into the calendar table\n\tStudentGroveDisplay.prototype.renderCalendar = function(containerId) {\n\t\t// Change the title\n\t\t$('#student-name').text(this.name);\n\t\t$('#title-text').text(\"\\'s Grove Cycle\")\n\t\t$('#student-icon').empty().append('<img class=\"student-icon\" src=\"'+this.image+'\">')\n\t\n\t\t// Hide the edit / add event form, if it is open, and reset it.\n\t\tresetForm(true, false);\n\t\n\t\t// Empty out the list if any events are in there, render the new events, then show calendar and make table sortable\n\t\t$(containerId).empty();\n\t\tthis.renderEvents(containerId);\n\t\n\t\tvar self = this;\n\t\n\t\t$('#calendar-container').show();\n\t\t$('#events-list').sortable({\n\t\t\tstop: self.updateSort.bind(self)\n\t\t});\n\t\n\t\t// Make the new event button show the form and attach the proper event handler to it\n\t\t$('#create-new-event').off('click').on('click', function(event){\n\t\t\t// Update the form legend and show it\n\t\t\t$('#activity-legend').text('New event for: ' + self.name);\n\t\t\t$('#activity-form').show('fast');\n\t\n\t\t\t// Event handler for submitting\n\t\t\t$('#add-event').on('click', function(e){\n\t\t\t\te.preventDefault();\n\t\n\t\t\t\t// On submit, grab all the data, create a new EventDisplay object, push it into the student's event displays, and append it to the DOM\n\t\t\t\tvar newEvent = {};\n\t\t\t\tvar activity = $('#activity-form select[name=\"activity\"]').val();\n\t\t\t\tnewEvent.location = activity.split('#')[0];\n\t\t\t\tnewEvent.activity = activity.split('#')[1];\n\t\n\t\t\t\tvar index = self.eventDisplays.length;\n\t\t\t\t\n\t\t\t\tvar focus_area = $('#activity-form select[name=\"focus_area\"]').val();\n\t\t\t\tnewEvent.focus_area = focus_area\n\t\t\t\taddToFocus(focus_area);\n\t\t\t\t\n\t\t\t\tnewEvent = new EventDisplay(self, newEvent, index);\n\t\n\t\t\t\tself.eventDisplays.push(newEvent);\n\t\n\t\t\t\tnewEvent.render('#events-list');\n\t\t\t\t\n\t\t\t\t// Reset the form\n\t\t\t\tresetForm(false, true);\n\t\n\t\t\t\t// Enable the save button now that changes have been made, change the text to \"Save Calendar\" if not already done\n\t\t\t\t$('#save-calendar').removeClass('disabled').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle');\n\t\t\t});\n\t\n\t\t\t// Event handler for canceling\n\t\t\t$('#cancel-event-add').on('click', function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\t// Reset the form and hide it\n\t\t\t\tresetForm(true)\n\t\t\t});\n\t\t});\n\t\t\n\t\t// Update the save calendar button to have disabled class and text of \"Save Calendar\"\n\t\t$('#save-calendar').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle').addClass('disabled');\n\t\n\t\t// Update the event handler on the save calendar button to refer to this student\n\t\t$('#save-calendar').off('click').on('click', function(event) {\n\t\t\t$('#save-calendar').empty().text('Saving...').addClass('disabled');\n\t\n\t\t\tvar calendar = self.eventDisplays.map(function(e) {\n\t\t\t\te.event.checkedIn = false;\n\t\t\t\treturn e.event;\n\t\t\t});\n\t\n\t\t\t$.ajax('/api/grove/'+self.googleId, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tdata: JSON.stringify({calendar: calendar}),\n\t\t\t\tcontentType: 'application/json',\n\t\t\t\tsuccess: function() {\n\t\t\t\t\t$('#save-calendar').empty().append('<i class=\"fa fa-calendar\"></i>   Cycle Saved!');\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\terror: function(xhr, text, error) {\n\t\t\t\t\t$('#save-calendar').empty().removeClass('btn-success').addClass('btn-danger').text('Error Saving').removeClass('disabled');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\t\n\t// Event Display constructor\n\tvar EventDisplay = function(student, event, index) {\n\t\tthis.student = student;\n\t\tthis.event = event;\n\t\tthis.index = index;\n\t\t// Call create display to make the DOM element\n\t\tthis.el = this.createDisplay();\n\t};\n\t\n\t// Creates the display element\n\tEventDisplay.prototype.createDisplay = function() {\n\t\t// Row item for the event\n\t\tvar row = '<tr></tr>';\n\t\n\t\t// Center\n\t\tvar location = $('<td></td>').text(this.event.location);\n\t\n\t\t// Activity\n\t\tvar activity = $('<td></td>').text(this.event.activity);\n\t\n\t\t// Focus Area\n\t\tvar focus_area = $('<td></td>').text(this.event.focus_area);\n\t\n\t\t// Buttons for editing and removing, added to the EventDisplay object\n\t\tvar edit = '<td></td>';\n\t\tthis.editButton = $('<button class=\"btn btn-xs btn-info\"><i class=\"fa fa-pencil\"></i></button>');\n\t\tedit = $(edit).append(this.editButton);\n\t\tvar remove = '<td></td>';\n\t\tthis.removeButton = $('<button class=\"btn btn-xs btn-danger\"><i class=\"fa fa-times\"></i></button>');\n\t\tremove = $(remove).append(this.removeButton);\n\t\n\t\t// Append cells to the row\n\t\treturn $(row).attr('data-index', this.index).append(location, activity, focus_area, edit, remove)[0];\n\t};\n\t\n\t// Renders the display element\n\tEventDisplay.prototype.render = function(container, replace) {\n\t\t\n\t\t// Create a new variable pointing to this particular event display so we can reference it in the edit and remove events\n\t\tvar self = this;\n\t\n\t\t// If the render is after an edit and replace was passed in, replace the old element\n\t\tif (replace) {\n\t\t\tvar oldElement = self.el;\n\t\t\tself.el = self.createDisplay();\n\t\t\t$(oldElement).replaceWith(self.el);\n\t\t} else {\n\t\t\t$(container).append(this.el);\n\t\t}\n\t\n\t\t// Once the element is added to the DOM, attach the event handlers to its elements\n\t\t// Attach the event handler for the edit button\n\t\t$(this.editButton).click(function(e) {\n\t\t\t// Show the event form, fill in the defaults for this event, bind submission to changing this event\n\t\t\t$('#activity-form select[name=\"activity\"]').val(self.event.location+'#'+self.event.activity);\n\t\t\t$('#activity-form select[name=\"focus_area\"]').select2('val', self.event.focus_area);\n\t\t\t$('#add-event-text').text('   Save');\n\t\n\t\t\t$('#activity-form').show('fast', function(){\n\t\t\t\t$('#add-event').off('click').one('click', function(e){\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\t// Update values for this event\n\t\t\t\t\tvar activity = $('#activity-form select[name=\"activity\"]').val();\n\t\t\t\t\tif (activity) {\n\t\t\t\t\t\tself.event.location = activity.split('#')[0];\n\t\t\t\t\t\tself.event.activity = activity.split('#')[1];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tself.event.location = '';\n\t\t\t\t\t\tself.event.activity = '';\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar focus_area = $('#activity-form select[name=\"focus_area\"]').val();\n\t\t\t\t\tself.event.focus_area = focus_area;\n\t\t\t\t\taddToFocus(focus_area);\n\t\t\t\t\t\n\t\t\t\t\t// Reset the form, unbind handlers, and hide it\n\t\t\t\t\tresetForm(true);\n\t\n\t\t\t\t\t// Render the element with replace set to true\n\t\t\t\t\tself.render('#events-list', true);\n\t\n\t\t\t\t\t// Enable the save calendar button now that changes have been made\n\t\t\t\t\t$('#save-calendar').removeClass('disabled');\n\t\t\t\t});\n\t\n\t\t\t\t// Event handler for canceling\n\t\t\t\t$('#cancel-event-add').on('click', function(e){\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\t// Reset the form and hide it\n\t\t\t\t\tresetForm(true);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t// Attach the event handler for the remove button, binding to this create display\n\t\t$(this.removeButton).click(function(e) {\n\t\t\t// Remove the el from the DOM\n\t\t\t$(self.el).remove()\n\t\t\t// Remove this event display from the student calendar\n\t\t\tself.student.eventDisplays.splice(self.index, 1);\n\t\t\t// Change the index of the later events\n\t\t\tself.student.eventDisplays.forEach(function(eventDisplay){\n\t\t\t\tif (eventDisplay.index > self.index) eventDisplay.index--;\n\t\t\t});\n\t\t\t// Remove all event handlers from the activity form and hide it\n\t\t\tresetForm(true);\n\t\t});\n\t}\n\t\n\t$(function(){\n\t\t// Load up the grove calendar options from CONFIG.js\n\t\t// The keys of GROVE_ACTIVITIES are the different centers\n\t\t_.keys(GROVE_ACTIVITIES).forEach( function(center) {\n\t\t\tvar group = $('<optgroup>').attr('label', center);\n\t\n\t\t\t// For each center, take all the activities and add an option\n\t\t\tGROVE_ACTIVITIES[center].forEach( function(activity) {\n\t\t\t\tvar option = $('<option>').attr('value', [center, activity].join('#')).text(activity);\n\t\t\t\tgroup.append(option);\n\t\t\t});\n\t\t\t$('select[name=\"activity\"]').append(group);\n\t\t});\n\t\n\t\t$('select[name=\"focus_area\"]').css('width', '100%').select2({\n\t\t\tdata: FOCUS_AREA_OPTIONS,\n\t\t\ttags: true,\n\t\t\twidth: 'style'\n\t\t});\n\t\n\t\t// Get all students\n\t\t$.get('/api/grove', function(data){\n\t\n\t\t\t// Initially fill the student list\n\t\t\tstudents = _.map(_.sortBy(data, 'name'), function(s) {\n\t\t\t\tstudent = new StudentGroveDisplay(s);\n\t\t\t\tstudent.renderOption('#student-names-select');\n\t\t\t\treturn student;\n\t\t\t});\n\t\n\t\t\t// When a student is selected, trigger their render calendar\n\t\t\t$('#student-names-select').on('change', function(e) {\n\t\t\t\tvar student = _.find(students, { 'googleId': e.target.value});\n\t\t\t\tstudent.renderCalendar('#events-list');\n\t\t\t});\n\t\n\t\t\t// When the student name input is changed, go through the students and only display the ones whose name matches the fragment in the input\n\t\t\t$('#student-name-search').on('keyup', function(e){\n\t\n\t\t\t\t$('#student-names-select').css('visibility', '');\n\t\n\t\t\t\tvar frag = $(this).val().toLowerCase();\n\t\t\t\t_.each(students, function(s) {\n\t\t\t\t\tif (s.name.toLowerCase().match(frag)){\n\t\t\t\t\t\ts.renderOption('#student-names-select');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$(s.option).remove();\n\t\t\t\t\t\ts.optionRendered = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t\t// If there is only one student in the list, trigger change\n\t\t\t\tif ($('#student-names-select option').length === 1) {\n\t\t\t\t\t$('#student-names-select').trigger('change');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** GroveCalendar.js\n **/","// Requires\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar $ = require('jquery');\nrequire('select2');\nrequire('bootstrap');\nrequire('jquery-ui');\n\n// Global variable students: array of all the student objects\nvar students = [];\n\n// Load the FOCUS_AREA options for initializing the select2, allowing teachers to input new focus areas if desired\nvar FOCUS_AREA_OPTIONS = _.chain(FOCUS_AREAS).keys().sortBy().value().map( function(fa) {\n\treturn {\n\t\tid: fa,\n\t\ttext: fa\n\t};\n});\n\n// Helper function for adding to FOCUS_AREA_OPTIONS\nfunction addToFocus(focus_area) {\n\t// Check if the focus_area already exists in the list, otherwise add it\n\tif (!_.findWhere(FOCUS_AREA_OPTIONS, {id: focus_area})) {\n\t\tFOCUS_AREA_OPTIONS = FOCUS_AREA_OPTIONS.concat({\n\t\t\tid: focus_area,\n\t\t\ttext: focus_area\n\t\t});\n\n\t\t$('select[name=\"focus_area\"]').select2({\n\t\t\tdata: FOCUS_AREA_OPTIONS,\n\t\t\ttags: true,\n\t\t\tallowClear: true,\n\t\t\twidth: 'style'\n\t\t});\n\t}\n}\n\n// Function for resetting the event form\nfunction resetForm(hideForm, retainSubmit){\n\t$('#add-event-text').text('   Add Event');\n\n\t// Manually reset values because select2 doesn't work with form.reset()\n\t$('#activity-form select[name=\"activity\"]').val(null);\n\t$('#activity-form select[name=\"focus_area\"]').select2('val', null);\n\n\tif (!retainSubmit) {\n\t\t$('#add-event').off('click');\n\t}\n\tif (hideForm) {\n\t\t$('#activity-form').hide('fast');\n\t\t$('#calendar-button-container').show('fast');\n\t}\n}\n\n// Constructor for student objects\nvar StudentGroveDisplay = function(student){\n\tthis.googleId = student.googleId;\n\tthis.name = student.name;\n\tthis.image = student.image;\n\tthis.calendar = student.groveCalendar || [];\n\tthis.option = $('<option>'+student.name+'</option>').attr('value', student.googleId);\n\tthis.optionRendered = false;\n\n\tthis.eventDisplays = _.map(student.groveCalendar, function(event, index) {\n\t\treturn new EventDisplay(this, event, index);\n\t}.bind(this)) || [];\n};\n\n// Check if the student is displayed in the list and, if not, render\nStudentGroveDisplay.prototype.renderOption = function(selectId){\n\tif (!this.optionRendered) {\n\t\t$(selectId).append(this.option);\n\t\tthis.optionRendered = true;\n\t}\n};\n\n// Throw each of the event display rows into the table\nStudentGroveDisplay.prototype.renderEvents = function(containerTable) {\n\t_.each(this.eventDisplays, function(d) {\n\t\td.render(containerTable);\n\n\t\t// Add any custom focus areas to the FOCUS_AREA_OPTIONS\n\t\taddToFocus(d.event.focus_area);\n\t});\n};\n\n// When the list is re-sorted through drag and drop, update all the indices\nStudentGroveDisplay.prototype.updateSort = function(e, ui) {\n\n\tvar self = this;\n\n\t// First, grab the updated list of indices, stored in the data-index attribute, and create a copy of the student's array of events\n\tvar indices = $('#events-list').sortable(\"toArray\", { attribute: 'data-index' });\n\n\t// Now iterate through each index, and update the orders\n\tindices.forEach(function(data_index, order) {\n\t\tif (data_index != order) {\n\t\t\tself.eventDisplays[data_index].index = order;\n\t\t\t$(self.eventDisplays[data_index].el).attr('data-index', order)\n\t\t}\n\t});\n\n\tthis.eventDisplays = _.sortBy(this.eventDisplays, 'index');\n\n\t// Enable the save button now that changes have been made, change the text to \"Save Calendar\" if not already done\n\t$('#save-calendar').removeClass('disabled').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle');\n}\n\n// Render the events into the calendar table\nStudentGroveDisplay.prototype.renderCalendar = function(containerId) {\n\t// Change the title\n\t$('#student-name').text(this.name);\n\t$('#title-text').text(\"\\'s Grove Cycle\")\n\t$('#student-icon').empty().append('<img class=\"student-icon\" src=\"'+this.image+'\">')\n\n\t// Hide the edit / add event form, if it is open, and reset it.\n\tresetForm(true, false);\n\n\t// Empty out the list if any events are in there, render the new events, then show calendar and make table sortable\n\t$(containerId).empty();\n\tthis.renderEvents(containerId);\n\n\tvar self = this;\n\n\t$('#calendar-container').show();\n\t$('#events-list').sortable({\n\t\tstop: self.updateSort.bind(self)\n\t});\n\n\t// Make the new event button show the form and attach the proper event handler to it\n\t$('#create-new-event').off('click').on('click', function(event){\n\t\t// Update the form legend and show it\n\t\t$('#activity-legend').text('New event for: ' + self.name);\n\t\t$('#activity-form').show('fast');\n\n\t\t// Event handler for submitting\n\t\t$('#add-event').on('click', function(e){\n\t\t\te.preventDefault();\n\n\t\t\t// On submit, grab all the data, create a new EventDisplay object, push it into the student's event displays, and append it to the DOM\n\t\t\tvar newEvent = {};\n\t\t\tvar activity = $('#activity-form select[name=\"activity\"]').val();\n\t\t\tnewEvent.location = activity.split('#')[0];\n\t\t\tnewEvent.activity = activity.split('#')[1];\n\n\t\t\tvar index = self.eventDisplays.length;\n\t\t\t\n\t\t\tvar focus_area = $('#activity-form select[name=\"focus_area\"]').val();\n\t\t\tnewEvent.focus_area = focus_area\n\t\t\taddToFocus(focus_area);\n\t\t\t\n\t\t\tnewEvent = new EventDisplay(self, newEvent, index);\n\n\t\t\tself.eventDisplays.push(newEvent);\n\n\t\t\tnewEvent.render('#events-list');\n\t\t\t\n\t\t\t// Reset the form\n\t\t\tresetForm(false, true);\n\n\t\t\t// Enable the save button now that changes have been made, change the text to \"Save Calendar\" if not already done\n\t\t\t$('#save-calendar').removeClass('disabled').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle');\n\t\t});\n\n\t\t// Event handler for canceling\n\t\t$('#cancel-event-add').on('click', function(e){\n\t\t\te.preventDefault();\n\t\t\t// Reset the form and hide it\n\t\t\tresetForm(true)\n\t\t});\n\t});\n\t\n\t// Update the save calendar button to have disabled class and text of \"Save Calendar\"\n\t$('#save-calendar').empty().append('<i class=\"fa fa-calendar\"></i>   Save Grove Cycle').addClass('disabled');\n\n\t// Update the event handler on the save calendar button to refer to this student\n\t$('#save-calendar').off('click').on('click', function(event) {\n\t\t$('#save-calendar').empty().text('Saving...').addClass('disabled');\n\n\t\tvar calendar = self.eventDisplays.map(function(e) {\n\t\t\te.event.checkedIn = false;\n\t\t\treturn e.event;\n\t\t});\n\n\t\t$.ajax('/api/grove/'+self.googleId, {\n\t\t\tmethod: 'PUT',\n\t\t\tdata: JSON.stringify({calendar: calendar}),\n\t\t\tcontentType: 'application/json',\n\t\t\tsuccess: function() {\n\t\t\t\t$('#save-calendar').empty().append('<i class=\"fa fa-calendar\"></i>   Cycle Saved!');\n\t\t\t\t\n\t\t\t},\n\t\t\terror: function(xhr, text, error) {\n\t\t\t\t$('#save-calendar').empty().removeClass('btn-success').addClass('btn-danger').text('Error Saving').removeClass('disabled');\n\t\t\t}\n\t\t});\n\t});\n};\n\n// Event Display constructor\nvar EventDisplay = function(student, event, index) {\n\tthis.student = student;\n\tthis.event = event;\n\tthis.index = index;\n\t// Call create display to make the DOM element\n\tthis.el = this.createDisplay();\n};\n\n// Creates the display element\nEventDisplay.prototype.createDisplay = function() {\n\t// Row item for the event\n\tvar row = '<tr></tr>';\n\n\t// Center\n\tvar location = $('<td></td>').text(this.event.location);\n\n\t// Activity\n\tvar activity = $('<td></td>').text(this.event.activity);\n\n\t// Focus Area\n\tvar focus_area = $('<td></td>').text(this.event.focus_area);\n\n\t// Buttons for editing and removing, added to the EventDisplay object\n\tvar edit = '<td></td>';\n\tthis.editButton = $('<button class=\"btn btn-xs btn-info\"><i class=\"fa fa-pencil\"></i></button>');\n\tedit = $(edit).append(this.editButton);\n\tvar remove = '<td></td>';\n\tthis.removeButton = $('<button class=\"btn btn-xs btn-danger\"><i class=\"fa fa-times\"></i></button>');\n\tremove = $(remove).append(this.removeButton);\n\n\t// Append cells to the row\n\treturn $(row).attr('data-index', this.index).append(location, activity, focus_area, edit, remove)[0];\n};\n\n// Renders the display element\nEventDisplay.prototype.render = function(container, replace) {\n\t\n\t// Create a new variable pointing to this particular event display so we can reference it in the edit and remove events\n\tvar self = this;\n\n\t// If the render is after an edit and replace was passed in, replace the old element\n\tif (replace) {\n\t\tvar oldElement = self.el;\n\t\tself.el = self.createDisplay();\n\t\t$(oldElement).replaceWith(self.el);\n\t} else {\n\t\t$(container).append(this.el);\n\t}\n\n\t// Once the element is added to the DOM, attach the event handlers to its elements\n\t// Attach the event handler for the edit button\n\t$(this.editButton).click(function(e) {\n\t\t// Show the event form, fill in the defaults for this event, bind submission to changing this event\n\t\t$('#activity-form select[name=\"activity\"]').val(self.event.location+'#'+self.event.activity);\n\t\t$('#activity-form select[name=\"focus_area\"]').select2('val', self.event.focus_area);\n\t\t$('#add-event-text').text('   Save');\n\n\t\t$('#activity-form').show('fast', function(){\n\t\t\t$('#add-event').off('click').one('click', function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\t// Update values for this event\n\t\t\t\tvar activity = $('#activity-form select[name=\"activity\"]').val();\n\t\t\t\tif (activity) {\n\t\t\t\t\tself.event.location = activity.split('#')[0];\n\t\t\t\t\tself.event.activity = activity.split('#')[1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tself.event.location = '';\n\t\t\t\t\tself.event.activity = '';\n\t\t\t\t}\n\n\t\t\t\tvar focus_area = $('#activity-form select[name=\"focus_area\"]').val();\n\t\t\t\tself.event.focus_area = focus_area;\n\t\t\t\taddToFocus(focus_area);\n\t\t\t\t\n\t\t\t\t// Reset the form, unbind handlers, and hide it\n\t\t\t\tresetForm(true);\n\n\t\t\t\t// Render the element with replace set to true\n\t\t\t\tself.render('#events-list', true);\n\n\t\t\t\t// Enable the save calendar button now that changes have been made\n\t\t\t\t$('#save-calendar').removeClass('disabled');\n\t\t\t});\n\n\t\t\t// Event handler for canceling\n\t\t\t$('#cancel-event-add').on('click', function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\t// Reset the form and hide it\n\t\t\t\tresetForm(true);\n\t\t\t});\n\t\t});\n\t});\n\t// Attach the event handler for the remove button, binding to this create display\n\t$(this.removeButton).click(function(e) {\n\t\t// Remove the el from the DOM\n\t\t$(self.el).remove()\n\t\t// Remove this event display from the student calendar\n\t\tself.student.eventDisplays.splice(self.index, 1);\n\t\t// Change the index of the later events\n\t\tself.student.eventDisplays.forEach(function(eventDisplay){\n\t\t\tif (eventDisplay.index > self.index) eventDisplay.index--;\n\t\t});\n\t\t// Remove all event handlers from the activity form and hide it\n\t\tresetForm(true);\n\t});\n}\n\n$(function(){\n\t// Load up the grove calendar options from CONFIG.js\n\t// The keys of GROVE_ACTIVITIES are the different centers\n\t_.keys(GROVE_ACTIVITIES).forEach( function(center) {\n\t\tvar group = $('<optgroup>').attr('label', center);\n\n\t\t// For each center, take all the activities and add an option\n\t\tGROVE_ACTIVITIES[center].forEach( function(activity) {\n\t\t\tvar option = $('<option>').attr('value', [center, activity].join('#')).text(activity);\n\t\t\tgroup.append(option);\n\t\t});\n\t\t$('select[name=\"activity\"]').append(group);\n\t});\n\n\t$('select[name=\"focus_area\"]').css('width', '100%').select2({\n\t\tdata: FOCUS_AREA_OPTIONS,\n\t\ttags: true,\n\t\twidth: 'style'\n\t});\n\n\t// Get all students\n\t$.get('/api/grove', function(data){\n\n\t\t// Initially fill the student list\n\t\tstudents = _.map(_.sortBy(data, 'name'), function(s) {\n\t\t\tstudent = new StudentGroveDisplay(s);\n\t\t\tstudent.renderOption('#student-names-select');\n\t\t\treturn student;\n\t\t});\n\n\t\t// When a student is selected, trigger their render calendar\n\t\t$('#student-names-select').on('change', function(e) {\n\t\t\tvar student = _.find(students, { 'googleId': e.target.value});\n\t\t\tstudent.renderCalendar('#events-list');\n\t\t});\n\n\t\t// When the student name input is changed, go through the students and only display the ones whose name matches the fragment in the input\n\t\t$('#student-name-search').on('keyup', function(e){\n\n\t\t\t$('#student-names-select').css('visibility', '');\n\n\t\t\tvar frag = $(this).val().toLowerCase();\n\t\t\t_.each(students, function(s) {\n\t\t\t\tif (s.name.toLowerCase().match(frag)){\n\t\t\t\t\ts.renderOption('#student-names-select');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$(s.option).remove();\n\t\t\t\t\ts.optionRendered = false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If there is only one student in the list, trigger change\n\t\t\tif ($('#student-names-select option').length === 1) {\n\t\t\t\t$('#student-names-select').trigger('change');\n\t\t\t}\n\t\t});\n\t});\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/grove-calendar.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}